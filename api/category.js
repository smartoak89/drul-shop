var HttpError = require('../error/index').HttpError;var uuid = require('uuid');function CategoryAPI (conf) {    this.conf = conf || require('../conf/index');    this.model = require('../models/category');}CategoryAPI.prototype = {    list: function (callback) {        this.model.find({}, function (err, result) {            if (err) return callback(err);            callback(null, result);        })    },    add: function (name, parentId, callback) {        var self = this;        parentId = parentId || 'root';        var category = {            uuid: uuid.v4(),            name: name,            parent: parentId        };        var Category = new this.model(category);        if (parentId !== 'root') {            self.find(parentId, function (err, parent) {                if (err) return callback(err);                if (!parent) {                    return callback (new HttpError(400, 'Invalid parent category ' + parentId))                }                parent.subcat.push({                    uuid: uuid.v4(),                    name: category.name,                    parent: parentId                });                console.log('updateParent => ', parent);                self.update(parent.uuid, parent, function (err, result) {                    if (err) return callback(err);                    callback(null, result);                })            })        } else {            Category.save(category, function (err, result) {                if (err) return callback(err);                callback (null, result);            });        }    },    find: function (id, callback) {        this.model.findOne({uuid: id}, function (err, result) {            if (err) return callback(err);            console.log('findeOneRes =>', result);            callback(null, result);        })    }};module.exports = function (conf) {    return new CategoryAPI(conf);};