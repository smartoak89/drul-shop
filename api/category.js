var HttpError = require('../error/index').HttpError;var db = require('../core/datastore')('category');var uuid = require('uuid');module.exports = {    create: function (cat, callback) {        db.create(cat, callback)    },    list: function (callback) {        db.list(callback);    },    update: function (id, updateCat, callback) {        db.update(id, updateCat, callback)    },    add: function (id, subCat, callback) {        db.find(id, function (err, result) {            if (err) return callback(err);            subCat.uuid = uuid.v4();            result.subcat.push(subCat);            db.update(result.uuid, result, callback);        })    },    remove: function (id, index, callback) {        db.find(id, function (err, result) {            if (err) return callback(err);            if(index) {                //TODO:remove                result.subcat.splice(index, 1);                db.update(result.uuid, result, callback);            }        });        db.remove(id, callback);    }};// function CategoryAPI (conf) {//     this.conf = conf || require('../conf/index');//     this.model = require('../models/category');// }//// CategoryAPI.prototype = {//     list: function (callback) {//         this.model.find({}, function (err, result) {//             if (err) return callback(err);//             callback(null, result);//         })//     },//     add: function (name, parentId, callback) {//         var self = this;//         parentId = parentId || 'root';//         var category = {//             uuid: uuid.v4(),//             name: name,//             parent: parentId//         };//         var Category = new this.model(category);////         if (parentId !== 'root') {//             self.find(parentId, function (err, parent) {//                 if (err) return callback(err);//                 if (!parent) {//                     return callback (new HttpError(400, 'Invalid parent category ' + parentId))//                 }//                 var subcat = {//                     uuid: uuid.v4(),//                     name: category.name,//                     parent: parentId//                 };//                 console.log('updateParent => ', parent);////                 self.update(parent.uuid, subcat, function (err, result) {//                     if (err) return callback(err);//                     if (!result) return callback(new HttpError(400, 'Parent Category is bad'))//                     callback(null, subcat);//                 });//             })//         } else {//             console.log('saveCategory => ', JSON.stringify(category));//             Category.save(category, function (err, result) {//                 if (err) return callback(err);//                 callback (null, result);//             });//         }//     },//     find: function (id, callback) {//         this.model.findOne({uuid: id}, function (err, result) {//             if (err) return callback(err);//             console.log('findeOneRes =>', result);//             if (!result) return callback(404);//             callback(null, result);//         })//     },//     update: function (id, subcat, callback) {//         this.model.update({uuid: id}, {$push: {'subcat': subcat}}, function (err, result) {//             if (err) return callback(err);//             return callback(null, result);//         })//     },//     delete: function (id, callback) {//         var self = this;//         this.find(id, function (err, result) {//             if (err) return callback(err);//             self.model.remove(result, function (err, result) {//                 if (err) return callback(err);//                 callback(null, result);//             })//         });//         // this.model.remove({uuid: id})//     }//// };//// module.exports = function (conf) {//     return new CategoryAPI(conf);// };